generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password_hash         String
  display_name          String
  birth_date            DateTime  @db.Date
  gender                String?
  looking_for_gender    String[]
  relationship_type     String[]
  city                  String?
  bio                   String?
  profile_image_url     String?
  additional_photos     Json?
  preferred_age_min     Int       @default(18)
  preferred_age_max     Int       @default(99)
  preferred_distance_km Int       @default(50)
  is_active             Boolean   @default(true)
  is_paid               Boolean   @default(false)
  paid_until            DateTime? @db.Timestamptz(3)
  verified_email        Boolean   @default(false)
  consents              Json      @default("{}")
  created_at            DateTime  @default(now()) @db.Timestamptz(3)
  updated_at            DateTime  @default(now()) @updatedAt @db.Timestamptz(3)
  last_active_at        DateTime  @default(now()) @db.Timestamptz(3)
  last_seen_at          DateTime? @default(now()) @db.Timestamptz(3)
  status_message        String?   @default("")
  latitude              Float?
  longitude             Float?
  is_admin              Boolean   @default(false)
  blocks_received       Block[]   @relation("Blocked")
  blocks_made           Block[]   @relation("Blocker")
  calls_initiated       Call[]    @relation("CallsInitiated")
  calls_received        Call[]    @relation("CallsReceived")
  likes_from            Like[]    @relation("LikesFrom")
  likes_to              Like[]    @relation("LikesTo")
  matches_as_user1      Match[]   @relation("MatchesUser1")
  matches_as_user2      Match[]   @relation("MatchesUser2")
  reports_received      Report[]  @relation("ReportsReceived")
  reports_made          Report[]  @relation("ReportsMade")

  @@index([email])
  @@index([last_active_at])
  @@index([last_seen_at])
  @@map("users")
}

model Like {
  id           Int      @id @default(autoincrement())
  from_user_id Int
  to_user_id   Int
  is_like      Boolean
  timestamp    DateTime @default(now()) @db.Timestamptz(3)
  from_user    User     @relation("LikesFrom", fields: [from_user_id], references: [id], onDelete: Cascade)
  to_user      User     @relation("LikesTo", fields: [to_user_id], references: [id], onDelete: Cascade)

  @@unique([from_user_id, to_user_id])
  @@index([to_user_id, from_user_id, is_like])
  @@map("likes")
}

model Match {
  id                                Int       @id @default(autoincrement())
  user1_id                          Int
  user2_id                          Int
  matched_at                        DateTime  @default(now()) @db.Timestamptz(3)
  is_active                         Boolean   @default(true)
  closed_at                         DateTime? @db.Timestamptz(3)
  close_reason                      String?
  default_voice_call_duration_sec   Int       @default(300)
  default_video_call_duration_sec   Int       @default(300)
  last_interaction_at               DateTime  @default(now()) @db.Timestamptz(3)
  match_inactivity_timeout_interval String    @default("14 days")
  calls                             Call[]
  user1                             User      @relation("MatchesUser1", fields: [user1_id], references: [id], onDelete: Cascade)
  user2                             User      @relation("MatchesUser2", fields: [user2_id], references: [id], onDelete: Cascade)

  @@index([user1_id, is_active])
  @@index([user2_id, is_active])
  @@index([is_active, last_interaction_at])
  @@map("matches")
}

model Call {
  id                         BigInt    @id @default(autoincrement())
  match_id                   Int
  call_segment_uuid          String    @unique @default(uuid()) @db.Uuid
  previous_call_segment_uuid String?   @db.Uuid
  initiator_user_id          Int
  receiver_user_id           Int
  call_type                  String
  status                     String
  start_time                 DateTime? @db.Timestamptz(3)
  end_time                   DateTime? @db.Timestamptz(3)
  duration_seconds           Int?
  end_reason                 String?
  initiated_at               DateTime  @default(now()) @db.Timestamptz(3)
  initiator_user             User      @relation("CallsInitiated", fields: [initiator_user_id], references: [id], onDelete: Cascade)
  match                      Match     @relation(fields: [match_id], references: [id], onDelete: Cascade)
  receiver_user              User      @relation("CallsReceived", fields: [receiver_user_id], references: [id], onDelete: Cascade)

  @@index([match_id, initiated_at(sort: Desc)])
  @@index([initiator_user_id])
  @@index([receiver_user_id])
  @@index([previous_call_segment_uuid])
  @@map("calls")
}

model Report {
  id              Int      @id @default(autoincrement())
  reporter_id     Int?
  reason          String   @db.Text
  created_at      DateTime @default(now()) @db.Timestamptz(3)
  reported_user_id Int?
  status          String   @default("pending") @db.Text // pending, reviewed, resolved, rejected

  reporter        User?     @relation("ReportsMade", fields: [reporter_id], references: [id], onDelete: SetNull)
  reported        User?     @relation("ReportsReceived", fields: [reported_user_id], references: [id], onDelete: SetNull)

  @@index([reported_user_id])
  @@index([reporter_id])
  @@map("reports")
}

model Block {
  id         Int      @id @default(autoincrement())
  blocker_id Int
  blocked_id Int
  created_at DateTime @default(now()) @db.Timestamptz(3)
  blocked    User     @relation("Blocked", fields: [blocked_id], references: [id], onDelete: Cascade)
  blocker    User     @relation("Blocker", fields: [blocker_id], references: [id], onDelete: Cascade)

  @@unique([blocker_id, blocked_id])
  @@index([blocked_id])
  @@map("blocks")
}
